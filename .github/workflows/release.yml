name: Build and Release Wails App

on:
  push:
    tags:
      - 'v*'  # Still trigger on version tags

jobs:
  extract-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set-version.outputs.version }}
    steps:
      - id: set-version
        name: Set Version from Tag
        run: |
          APP_VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$APP_VERSION" >> $GITHUB_OUTPUT
          echo "Setting version to $APP_VERSION"

  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install frontend dependencies
        run: npm install
        working-directory: ./frontend

      - name: Run lint
        run: npm run lint
        working-directory: ./frontend

      - name: Run format check
        run: npm run format -- --check
        working-directory: ./frontend

      - name: Run type check
        run: npm run type-check
        working-directory: ./frontend

  build-macos:
    needs: [extract-version, validate]
    runs-on: macos-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Install Wails
        run: |
          go install github.com/wailsapp/wails/v2/cmd/wails@latest
          echo "$HOME/go/bin" >> $GITHUB_PATH

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install frontend dependencies
        run: npm install
        working-directory: ./frontend

      - name: Build frontend
        run: npm run build
        working-directory: ./frontend

      - name: Get version from extract-version job
        run: echo "APP_VERSION=${{needs.extract-version.outputs.version}}" >> $GITHUB_ENV
      
      - name: Build macOS app
        run: |
          wails build -platform darwin/universal -ldflags "-X 'main.Version=${{ env.APP_VERSION }}'"

      - name: Create dist directory
        run: mkdir -p dist

      - name: Create .dmg installer
        run: |
          brew install create-dmg
          create-dmg \
            --volname "Jot Installer" \
            --window-pos 200 120 \
            --window-size 800 400 \
            --icon-size 100 \
            --icon "jot.app" 200 190 \
            --hide-extension "jot.app" \
            --app-drop-link 600 185 \
            --no-internet-enable \
            dist/Jot-macOS.dmg \
            build/bin/jot.app

      - name: Upload macOS DMG
        uses: actions/upload-artifact@v4
        with:
          name: Jot-macOS
          path: dist/Jot-macOS.dmg

  build-windows:
    needs: [extract-version, validate]
    runs-on: windows-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Install Wails
        run: go install github.com/wailsapp/wails/v2/cmd/wails@latest

      - name: Add Go bin to path
        run: echo "$env:USERPROFILE\\go\\bin" | Out-File -Append -FilePath $env:GITHUB_PATH -Encoding utf8

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install frontend dependencies
        run: npm install
        working-directory: ./frontend

      - name: Build frontend
        run: npm run build
        working-directory: ./frontend

      - name: Get version from extract-version job
        run: echo "APP_VERSION=${{needs.extract-version.outputs.version}}" >> $env:GITHUB_ENV

      - name: Build Windows app with NSIS installer
        run: |
          wails build -platform windows/amd64 -nsis -ldflags "-X 'main.Version=${{ env.APP_VERSION }}'"

      - name: Create dist directory
        run: New-Item -ItemType Directory -Force -Path dist

      - name: Copy Windows installer
        run: Copy-Item -Path build/bin/jot-amd64-installer.exe -Destination dist/Jot-Windows-Installer.exe

      - name: Upload Windows installer
        uses: actions/upload-artifact@v4
        with:
          name: Jot-Windows-Installer
          path: dist/Jot-Windows-Installer.exe

  release:
    needs: [extract-version, build-macos, build-windows]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Download macOS artifact
        uses: actions/download-artifact@v4
        with:
          name: Jot-macOS
          path: ./release-assets

      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        with:
          name: Jot-Windows-Installer
          path: ./release-assets

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ github.ref_name }}
          tag_name: ${{ github.ref_name }}
          files: ./release-assets/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
